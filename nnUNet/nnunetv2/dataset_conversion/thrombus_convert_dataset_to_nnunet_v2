import sys
import os
from pathlib import Path
import shutil
import json
import numpy as np
import nibabel as nib
import pandas as pd
from tqdm import tqdm
from nibabel.processing import resample_from_to


def generate_json_from_dir_v2(foldername, subjects_train, subjects_val, labels):
    print("Creating dataset.json...")
    out_base = foldername
    out_base.mkdir(parents=True, exist_ok=True)

    json_dict = {
        'name': "Dataset007_ThrombusDataset",
        'description': "Segmentation of patients with portal vein thrombosis",
        'channel_names': {"0": "CT"},
        'labels': {"background": 0, "thrombus": 1},  # Only thrombus included in labels
        'numTraining': len(subjects_train) + len(subjects_val),
        'file_ending': '.nii.gz',
        'overwrite_image_reader_writer': 'NibabelIOWithReorient'
    }

    json.dump(json_dict, open(out_base / "dataset.json", "w"), sort_keys=False, indent=4)

    print("Creating split_final.json...")
    output_folder_pkl = Path(os.environ['nnUNet_preprocessed']) / foldername.name
    output_folder_pkl.mkdir(parents=True, exist_ok=True)

    splits = [{"train": subjects_train, "val": subjects_val}]

    print(f"nr of folds: {len(splits)}")
    print(f"nr train subjects (fold 0): {len(splits[0]['train'])}")
    print(f"nr val subjects (fold 0): {len(splits[0]['val'])}")

    json.dump(splits, open(output_folder_pkl / "splits_final.json", "w"), sort_keys=False, indent=4)


def combine_labels(ref_img_path, file_out, masks_path, labels):
    ref_img = nib.load(ref_img_path)
    ref_shape = ref_img.shape
    combined = np.zeros(ref_shape, dtype=np.uint8)

    # Ruta a la m치scara de trombo
    thrombus_mask_path = Path(masks_path / "thrombus.nii.gz")

    if thrombus_mask_path.exists():
        img = nib.load(thrombus_mask_path)

        # Reescalar si las formas no coinciden
        if img.shape != ref_shape:
            print(f"[WARN] Shape mismatch: ref={ref_shape}, thrombus={img.shape}. Resampling...")
            try:
                img = resample_from_to(img, ref_img, order=0)  # Interpolaci칩n vecina para m치scara
            except Exception as e:
                print(f"[ERROR] Could not resample thrombus mask for {ref_img_path}: {e}")
                return

        # Aplicar la m치scara
        thrombus_data = img.get_fdata()
        combined[thrombus_data > 0] = 1  # Label 1: trombo

    else:
        print(f"[WARN] Missing mask: {thrombus_mask_path}")

    # Guardar la imagen combinada
    nib.save(nib.Nifti1Image(combined.astype(np.uint8), ref_img.affine, ref_img.header), file_out)


if __name__ == "__main__":
    dataset_path = Path("/gpfs/home/bandres/nnUNetDataset/Database_Auto_Seg_v4")
    nnunet_path = Path("/gpfs/home/bandres/nnUNetFrame/dataset/nnUNet_raw/Dataset007_ThrombusDataset")

    labels = {"background": 0, "thrombus": 1}

    (nnunet_path / "imagesTr").mkdir(parents=True, exist_ok=True)
    (nnunet_path / "labelsTr").mkdir(parents=True, exist_ok=True)
    (nnunet_path / "imagesTs").mkdir(parents=True, exist_ok=True)
    (nnunet_path / "labelsTs").mkdir(parents=True, exist_ok=True)

    meta = pd.read_csv(dataset_path / "meta.csv", sep=",")
    subjects_train = list(meta[meta["split"] == "train"]["image_id"].values)
    subjects_val = list(meta[meta["split"] == "val"]["image_id"].values)
    subjects_test = list(meta[meta["split"] == "test"]["image_id"].values)

    print("Copying train data...")
    
    for subject in tqdm(subjects_train + subjects_val):
        subject_path = dataset_path / subject
        print(f"Processing patient: {subject}")
        shutil.copy(subject_path / "ct.nii.gz", nnunet_path / "imagesTr" / f"{subject}_0000.nii.gz")
        combine_labels(subject_path / "ct.nii.gz",
               nnunet_path / "labelsTr" / f"{subject}.nii.gz",
               subject_path / "segmentations", labels)

    print("Copying test data...")
    for subject in tqdm(subjects_test):
        subject_path = dataset_path / subject
        print(f"Processing patient: {subject}")
        shutil.copy(subject_path / "ct.nii.gz", nnunet_path / "imagesTs" / f"{subject}_0000.nii.gz")
        combine_labels(subject_path / "ct.nii.gz",
                       nnunet_path / "labelsTs" / f"{subject}.nii.gz",
                       subject_path / "segmentations", labels)

    generate_json_from_dir_v2(nnunet_path, subjects_train, subjects_val, labels)